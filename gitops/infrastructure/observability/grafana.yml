---
apiVersion: v1
kind: Namespace
metadata:
  name: observability-stack

---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: grafana
  namespace: observability-stack
spec:
  interval: 24h
  url: https://grafana.github.io/helm-charts

---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: tempo
  namespace: observability-stack
spec:
  interval: 30m
  chart:
    spec:
      chart: tempo
      version: "1.7.x"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: observability-stack
      interval: 12h
  values:
    tempo:
      repository: "grafana/tempo"
      tag: 2.4.0

      reportingEnabled: false

      metricsGenerator:
        enabled: true
        remoteWriteUrl: "http://prometheus/api/v1/write"
      
      retention: 1h

      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: "0.0.0.0:4317"
            http:
              endpoint: "0.0.0.0:4318"
      
      persistence:
        enabled: true

---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: loki-stack
  namespace: observability-stack
spec:
  dependsOn:
    - name: tempo
  interval: 30m
  chart:
    spec:
      chart: loki-stack
      version: "2.10.x"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: observability-stack
      interval: 12h
  values:
    loki:
      enabled: true
      image:
        registry: docker.io
        repository: grafana/loki
        tag: 2.6.1
      config:
        analytics:
          reporting_enabled: false
      query_scheduler:
        max_outstanding_requests_per_tenant: 2048
      storage:
        type: filesystem

    promtail:
      enabled: true
      image:
        registry: docker.io
        repository: grafana/promtail
        tag: 2.9.5

    grafana:
      enabled: true
      image:
        registry: docker.io
        repository: grafana/grafana-oss
        tag: 10.2.4
      service:
        type: ClusterIP
      grafana.ini:
        analytics:
          enabled: false
          reporting_enabled: false
          check_for_updates: false
          check_for_plugin_updates: false
          feedback_links_enabled: false
        feature_toggles:
          enable: correlations dataSourcePageHeader traceToMetrics scenes showDashboardValidationWarnings extraThemes lokiPredefinedOperations lokiFormatQuery exploreScrollableLogsContainer vizAndWidgetSplit logsExploreTableVisualisation metricsSummary featureToggleAdminPage httpSLOLevels enableNativeHTTPHistogram
        news:
          news_feed_enabled: false
        paths:
          temp_data_lifetime: 1h
        server:
          domain: grafana.staging.kadras.dev
          enable_gzip: true
        snapshots:
          enabled: false
          external_enabled: false
        users:
          default_theme: light
      ingress:
        enabled: true
        ingressClassName: contour
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-http01-issuer
        hosts:
          - grafana.staging.kadras.dev
        tls:
          - secretName: grafana-tls-certificate
            hosts:
              - grafana.staging.kadras.dev
      persistence:
        enabled: false
      # See: https://github.com/grafana/helm-charts/issues/1746
      rbac:
        pspEnabled: false
      testFramework:
        enabled: false
      sidecar:
        dashboards:
          enabled: true
          provider:
            allowUiUpdates: true
        datasources:
          enabled: false
      datasources:
        "datasources.yaml":
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              uid: prometheus
              access: proxy
              url: http://loki-stack-prometheus-server
              basicAuth: false
              isDefault: false
              version: 1
              editable: true
              jsonData:
                httpMethod: POST
                exemplarTraceIdDestinations:
                  - name: traceID
                    datasourceUid: tempo
            - name: Tempo
              type: tempo
              uid: tempo
              access: proxy
              url: http://tempo:3100
              basicAuth: false
              isDefault: false
              version: 1
              editable: true
              jsonData:
                httpMethod: GET
                tracesToMetrics:
                  datasourceUid: prometheus
                  tags: [ { key: 'service.name', value: 'application' }, { key: 'org' }, { key: 'method' }, { key: 'uri' }, { key: 'outcome' }, { key: 'status' }, { key: 'exception' } ]
                  queries:
                    - name: 'Throughput'
                      query: 'sum(rate(http_server_requests_seconds_count{$$__tags}[$$__rate_interval]))'
                    - name: 'Latency'
                      query: 'histogram_quantile(1.00, sum(rate(http_server_requests_seconds_bucket{$$__tags}[$$__rate_interval])) by (le))'
                tracesToLogs:
                  datasourceUid: 'loki'
                  tags: [ 'instance', 'pod', 'namespace', 'hostname' ]
                  mappedTags: [ { key: 'org' }, { key: 'service.name', value: 'application' }  ]
                  mapTagNamesEnabled: true
                  spanStartTimeShift: '1h'
                  spanEndTimeShift: '1h'
                  filterByTraceID: true
                  filterBySpanID: false
                  lokiSearch: true
                lokiSearch:
                  datasourceUid: loki
                serviceMap:
                  datasourceUid: prometheus
                search:
                  hide: false
                nodeGraph:
                  enabled: true
            - name: Loki
              type: loki
              uid: loki
              access: proxy
              url: http://loki-stack:3100
              basicAuth: false
              isDefault: true
              version: 1
              editable: true
              jsonData:
                derivedFields:
                  - datasourceUid: tempo
                    matcherRegex: '.+ --- \[.+\] \[.+\] \[(\w*)-\w*\] .+'
                    name: traceId
                    url: $${__value.raw}

    prometheus:
      enabled: true
      alertmanager:
        enabled: false
      configmapReload:
        alertmanager:
          enabled: false
      kube-state-metrics:
        metricLabelsAllowlist:
          - pods=[*]
          - deployments=[app.kubernetes.io/name,app.kubernetes.io/component,app.kubernetes.io/instance]
      pushgateway:
        enabled: false
      server:
        global:
          scrape_interval: 15s
        image:
          repository: quay.io/prometheus/prometheus
          tag: v2.50.1
        persistentVolume:
          enabled: false
      extraScrapeConfigs: |
        - job_name: rabbitmq-http
          honor_timestamps: true
          scrape_interval: 15s
          scrape_timeout: 14s
          metrics_path: /metrics
          scheme: http
          follow_redirects: true
          relabel_configs:
          - source_labels: [job]
            separator: ;
            regex: (.*)
            target_label: __tmp_prometheus_job_name
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_component]
            separator: ;
            regex: rabbitmq
            replacement: $1
            action: keep
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            separator: ;
            regex: prometheus
            replacement: $1
            action: keep
          - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
            separator: ;
            regex: Node;(.*)
            target_label: node
            replacement: ${1}
            action: replace
          - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
            separator: ;
            regex: Pod;(.*)
            target_label: pod
            replacement: ${1}
            action: replace
          - source_labels: [__meta_kubernetes_namespace]
            separator: ;
            regex: (.*)
            target_label: namespace
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_service_name]
            separator: ;
            regex: (.*)
            target_label: service
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_name]
            separator: ;
            regex: (.*)
            target_label: pod
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_container_name]
            separator: ;
            regex: (.*)
            target_label: container
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_service_name]
            separator: ;
            regex: (.*)
            target_label: job
            replacement: ${1}
            action: replace
          - separator: ;
            regex: (.*)
            target_label: endpoint
            replacement: prometheus
            action: replace
          - source_labels: [__address__]
            separator: ;
            regex: (.*)
            modulus: 1
            target_label: __tmp_hash
            replacement: $1
            action: hashmod
          - source_labels: [__tmp_hash]
            separator: ;
            regex: "0"
            replacement: $1
            action: keep
          kubernetes_sd_configs:
          - role: endpoints
            follow_redirects: true
        - job_name: rabbitmq-https
          honor_timestamps: true
          scrape_interval: 15s
          scrape_timeout: 14s
          metrics_path: /metrics
          scheme: https
          tls_config:
            insecure_skip_verify: true
          follow_redirects: true
          relabel_configs:
          - source_labels: [job]
            separator: ;
            regex: (.*)
            target_label: __tmp_prometheus_job_name
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_component]
            separator: ;
            regex: rabbitmq
            replacement: $1
            action: keep
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            separator: ;
            regex: prometheus-tls
            replacement: $1
            action: keep
          - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
            separator: ;
            regex: Node;(.*)
            target_label: node
            replacement: ${1}
            action: replace
          - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
            separator: ;
            regex: Pod;(.*)
            target_label: pod
            replacement: ${1}
            action: replace
          - source_labels: [__meta_kubernetes_namespace]
            separator: ;
            regex: (.*)
            target_label: namespace
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_service_name]
            separator: ;
            regex: (.*)
            target_label: service
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_name]
            separator: ;
            regex: (.*)
            target_label: pod
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_container_name]
            separator: ;
            regex: (.*)
            target_label: container
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_service_name]
            separator: ;
            regex: (.*)
            target_label: job
            replacement: ${1}
            action: replace
          - separator: ;
            regex: (.*)
            target_label: endpoint
            replacement: prometheus-tls
            action: replace
          - source_labels: [__address__]
            separator: ;
            regex: (.*)
            modulus: 1
            target_label: __tmp_hash
            replacement: $1
            action: hashmod
          - source_labels: [__tmp_hash]
            separator: ;
            regex: "0"
            replacement: $1
            action: keep
          kubernetes_sd_configs:
          - role: endpoints
            follow_redirects: true
        - job_name: rabbitmq-cluster-operator
          honor_timestamps: true
          scrape_interval: 30s
          scrape_timeout: 10s
          metrics_path: /metrics
          scheme: http
          follow_redirects: true
          relabel_configs:
          - source_labels: [job]
            separator: ;
            regex: (.*)
            target_label: __tmp_prometheus_job_name
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
            separator: ;
            regex: rabbitmq-cluster-operator
            replacement: $1
            action: keep
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            separator: ;
            regex: metrics
            replacement: $1
            action: keep
          - source_labels: [__meta_kubernetes_namespace]
            separator: ;
            regex: (.*)
            target_label: namespace
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_container_name]
            separator: ;
            regex: (.*)
            target_label: container
            replacement: $1
            action: replace
          - source_labels: [__meta_kubernetes_pod_name]
            separator: ;
            regex: (.*)
            target_label: pod
            replacement: $1
            action: replace
          - separator: ;
            regex: (.*)
            target_label: job
            replacement: rabbitmq-cluster-operator
            action: replace
          - separator: ;
            regex: (.*)
            target_label: endpoint
            replacement: metrics
            action: replace
          - source_labels: [__address__]
            separator: ;
            regex: (.*)
            modulus: 1
            target_label: __tmp_hash
            replacement: $1
            action: hashmod
          - source_labels: [__tmp_hash]
            separator: ;
            regex: "0"
            replacement: $1
            action: keep
          kubernetes_sd_configs:
          - role: pod
            follow_redirects: true
            namespaces:
              names:
              - rabbitmq-system
